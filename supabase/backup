create table public.lab_test_fields (
  id uuid not null default gen_random_uuid (),
  lab_test_id uuid not null,
  field_name text not null,
  field_type text not null,
  field_options text[] null,
  is_required boolean not null default false,
  field_order integer not null default 0,
  created_at timestamp with time zone not null default now(),
  constraint lab_test_fields_pkey primary key (id),
  constraint lab_test_fields_lab_test_id_fkey foreign KEY (lab_test_id) references lab_tests (id) on delete CASCADE,
  constraint lab_test_fields_field_type_check check (
    (
      field_type = any (
        array[
          'text'::text,
          'number'::text,
          'dropdown'::text,
          'textarea'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;



create table public.lab_tests (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint lab_tests_pkey primary key (id),
  constraint lab_tests_name_key unique (name)
) TABLESPACE pg_default;

create trigger update_lab_tests_updated_at BEFORE
update on lab_tests for EACH row
execute FUNCTION update_updated_at_column ();


create table public.patients (
  id uuid not null default gen_random_uuid (),
  name text not null,
  unique_id text not null,
  age integer not null,
  sex text not null,
  rank text not null,
  ward text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint patients_pkey primary key (id),
  constraint patients_age_check check (
    (
      (age > 0)
      and (age < 150)
    )
  ),
  constraint patients_rank_check check (
    (
      rank = any (
        array[
          'Army'::text,
          'Army Family'::text,
          'Civil'::text,
          'Pension'::text
        ]
      )
    )
  ),
  constraint patients_sex_check check ((sex = any (array['Male'::text, 'Female'::text]))),
  constraint patients_ward_check check (
    (
      ward = any (
        array[
          'OPD'::text,
          'Medical'::text,
          'Gynecology'::text,
          'Surgery'::text,
          'Pediatric'::text,
          'Orthopedic'::text,
          'Cardiology'::text,
          'Emergency'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create trigger update_patients_updated_at BEFORE
update on patients for EACH row
execute FUNCTION update_updated_at_column ();


create table public.test_results (
  id uuid not null default gen_random_uuid (),
  test_id uuid not null,
  field_name text not null,
  field_value text null,
  created_at timestamp with time zone not null default now(),
  constraint test_results_pkey primary key (id),
  constraint test_results_test_id_fkey foreign KEY (test_id) references tests (id) on delete CASCADE
) TABLESPACE pg_default;


create table public.tests (
  id uuid not null default gen_random_uuid (),
  patient_id uuid not null,
  lab_test_id uuid not null,
  status text not null default 'pending'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint tests_pkey primary key (id),
  constraint tests_lab_test_id_fkey foreign KEY (lab_test_id) references lab_tests (id) on delete CASCADE,
  constraint tests_patient_id_fkey foreign KEY (patient_id) references patients (id) on delete CASCADE,
  constraint tests_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'in_progress'::text,
          'completed'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create trigger update_tests_updated_at BEFORE
update on tests for EACH row
execute FUNCTION update_updated_at_column ();
